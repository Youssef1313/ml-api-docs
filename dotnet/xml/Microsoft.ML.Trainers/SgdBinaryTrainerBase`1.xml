<Type Name="SgdBinaryTrainerBase&lt;TModel&gt;" FullName="Microsoft.ML.Trainers.SgdBinaryTrainerBase&lt;TModel&gt;">
  <TypeSignature Language="C#" Value="public abstract class SgdBinaryTrainerBase&lt;TModel&gt; : Microsoft.ML.Trainers.LinearTrainerBase&lt;Microsoft.ML.Data.BinaryPredictionTransformer&lt;TModel&gt;,TModel&gt; where TModel : class, IPredictorProducing&lt;float&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SgdBinaryTrainerBase`1&lt;class (class Microsoft.ML.IPredictorProducing`1&lt;float32&gt;) TModel&gt; extends Microsoft.ML.Trainers.LinearTrainerBase`2&lt;class Microsoft.ML.Data.BinaryPredictionTransformer`1&lt;!TModel&gt;, !TModel&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Trainers.SgdBinaryTrainerBase`1" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class SgdBinaryTrainerBase(Of TModel)&#xA;Inherits LinearTrainerBase(Of BinaryPredictionTransformer(Of TModel), TModel)" />
  <TypeSignature Language="F#" Value="type SgdBinaryTrainerBase&lt;'Model (requires 'Model : null and 'Model :&gt; IPredictorProducing&lt;single&gt;)&gt; = class&#xA;    inherit LinearTrainerBase&lt;BinaryPredictionTransformer&lt;'Model&gt;, 'Model (requires 'Model : null and 'Model :&gt; IPredictorProducing&lt;single&gt;)&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.StandardLearners</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TModel">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
        <InterfaceName>Microsoft.ML.IPredictorProducing&lt;System.Single&gt;</InterfaceName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>Microsoft.ML.Trainers.LinearTrainerBase&lt;Microsoft.ML.Data.BinaryPredictionTransformer&lt;TModel&gt;,TModel&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="TTransformer">Microsoft.ML.Data.BinaryPredictionTransformer&lt;TModel&gt;</BaseTypeArgument>
      <BaseTypeArgument TypeParamName="TModel">TModel</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TModel">To be added.</typeparam>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateLinearBinaryModelParameters">
      <MemberSignature Language="C#" Value="protected Microsoft.ML.Trainers.LinearBinaryModelParameters CreateLinearBinaryModelParameters (Microsoft.ML.Data.VBuffer&lt;float&gt; weights, float bias);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class Microsoft.ML.Trainers.LinearBinaryModelParameters CreateLinearBinaryModelParameters(valuetype Microsoft.ML.Data.VBuffer`1&lt;float32&gt; weights, float32 bias) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Trainers.SgdBinaryTrainerBase`1.CreateLinearBinaryModelParameters(Microsoft.ML.Data.VBuffer{System.Single},System.Single)" />
      <MemberSignature Language="VB.NET" Value="Protected Function CreateLinearBinaryModelParameters (weights As VBuffer(Of Single), bias As Single) As LinearBinaryModelParameters" />
      <MemberSignature Language="F#" Value="member this.CreateLinearBinaryModelParameters : Microsoft.ML.Data.VBuffer&lt;single&gt; * single -&gt; Microsoft.ML.Trainers.LinearBinaryModelParameters" Usage="sgdBinaryTrainerBase.CreateLinearBinaryModelParameters (weights, bias)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StandardLearners</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Trainers.LinearBinaryModelParameters</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="weights" Type="Microsoft.ML.Data.VBuffer&lt;System.Single&gt;" />
        <Parameter Name="bias" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="weights">To be added.</param>
        <param name="bias">To be added.</param>
        <summary>
            A helper function used to create <see cref="T:Microsoft.ML.Trainers.LinearBinaryModelParameters" /> in implementations of <see cref="M:Microsoft.ML.Trainers.SgdBinaryTrainerBase`1.CreateModel(Microsoft.ML.Data.VBuffer{System.Single},System.Single)" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateModel">
      <MemberSignature Language="C#" Value="protected abstract TModel CreateModel (Microsoft.ML.Data.VBuffer&lt;float&gt; weights, float bias);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance !TModel CreateModel(valuetype Microsoft.ML.Data.VBuffer`1&lt;float32&gt; weights, float32 bias) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Trainers.SgdBinaryTrainerBase`1.CreateModel(Microsoft.ML.Data.VBuffer{System.Single},System.Single)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function CreateModel (weights As VBuffer(Of Single), bias As Single) As TModel" />
      <MemberSignature Language="F#" Value="abstract member CreateModel : Microsoft.ML.Data.VBuffer&lt;single&gt; * single -&gt; 'Model" Usage="sgdBinaryTrainerBase.CreateModel (weights, bias)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StandardLearners</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TModel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="weights" Type="Microsoft.ML.Data.VBuffer&lt;System.Single&gt;" />
        <Parameter Name="bias" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="weights">Weights of linear model.</param>
        <param name="bias">Bias of linear model.</param>
        <summary>
          <see cref="M:Microsoft.ML.Trainers.SgdBinaryTrainerBase`1.CreateModel(Microsoft.ML.Data.VBuffer{System.Single},System.Single)" /> implements a mechanism to craft a typed model out from linear weights and a bias.
            It's used at the end of <see cref="M:Microsoft.ML.Trainers.SgdBinaryTrainerBase`1.TrainCore(Microsoft.ML.IChannel,Microsoft.ML.Data.RoleMappedData,Microsoft.ML.Trainers.LinearModelParameters,System.Int32)" /> to finalize the trained model.
            Derived classes should implement <see cref="M:Microsoft.ML.Trainers.SgdBinaryTrainerBase`1.CreateModel(Microsoft.ML.Data.VBuffer{System.Single},System.Single)" /> because different trainers may produce different
            types of models.
            </summary>
        <returns>A model built upon weights and bias. It can be as simple as a <see cref="T:Microsoft.ML.Trainers.LinearBinaryModelParameters" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fit">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Data.BinaryPredictionTransformer&lt;TModel&gt; Fit (Microsoft.Data.DataView.IDataView trainData, Microsoft.ML.IPredictor initialPredictor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.ML.Data.BinaryPredictionTransformer`1&lt;!TModel&gt; Fit(class Microsoft.Data.DataView.IDataView trainData, class Microsoft.ML.IPredictor initialPredictor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Trainers.SgdBinaryTrainerBase`1.Fit(Microsoft.Data.DataView.IDataView,Microsoft.ML.IPredictor)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fit (trainData As IDataView, initialPredictor As IPredictor) As BinaryPredictionTransformer(Of TModel)" />
      <MemberSignature Language="F#" Value="override this.Fit : Microsoft.Data.DataView.IDataView * Microsoft.ML.IPredictor -&gt; Microsoft.ML.Data.BinaryPredictionTransformer&lt;'Model (requires 'Model : null and 'Model :&gt; Microsoft.ML.IPredictorProducing&lt;single&gt;)&gt;" Usage="sgdBinaryTrainerBase.Fit (trainData, initialPredictor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StandardLearners</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Data.BinaryPredictionTransformer&lt;TModel&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trainData" Type="Microsoft.Data.DataView.IDataView" />
        <Parameter Name="initialPredictor" Type="Microsoft.ML.IPredictor" />
      </Parameters>
      <Docs>
        <param name="trainData">To be added.</param>
        <param name="initialPredictor">To be added.</param>
        <summary>
            Continues the training of a <see cref="T:Microsoft.ML.Trainers.SdcaBinaryTrainer" /> using an initial predictor and returns a <see cref="T:Microsoft.ML.Data.BinaryPredictionTransformer" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Info">
      <MemberSignature Language="C#" Value="public override Microsoft.ML.TrainerInfo Info { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ML.TrainerInfo Info" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Trainers.SgdBinaryTrainerBase`1.Info" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Info As TrainerInfo" />
      <MemberSignature Language="F#" Value="member this.Info : Microsoft.ML.TrainerInfo" Usage="Microsoft.ML.Trainers.SgdBinaryTrainerBase&lt;'Model (requires 'Model : null and 'Model :&gt; Microsoft.ML.IPredictorProducing&lt;System.single&gt;)&gt;.Info" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StandardLearners</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.TrainerInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Loss">
      <MemberSignature Language="C#" Value="protected Microsoft.ML.IClassificationLoss Loss { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.ML.IClassificationLoss Loss" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Trainers.SgdBinaryTrainerBase`1.Loss" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Loss As IClassificationLoss" />
      <MemberSignature Language="F#" Value="member this.Loss : Microsoft.ML.IClassificationLoss" Usage="Microsoft.ML.Trainers.SgdBinaryTrainerBase&lt;'Model (requires 'Model : null and 'Model :&gt; Microsoft.ML.IPredictorProducing&lt;System.single&gt;)&gt;.Loss" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StandardLearners</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.IClassificationLoss</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeTransformer">
      <MemberSignature Language="C#" Value="protected override Microsoft.ML.Data.BinaryPredictionTransformer&lt;TModel&gt; MakeTransformer (TModel model, Microsoft.Data.DataView.DataViewSchema trainSchema);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class Microsoft.ML.Data.BinaryPredictionTransformer`1&lt;!TModel&gt; MakeTransformer(!TModel model, class Microsoft.Data.DataView.DataViewSchema trainSchema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Trainers.SgdBinaryTrainerBase`1.MakeTransformer(`0,Microsoft.Data.DataView.DataViewSchema)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function MakeTransformer (model As TModel, trainSchema As DataViewSchema) As BinaryPredictionTransformer(Of TModel)" />
      <MemberSignature Language="F#" Value="override this.MakeTransformer : 'Model * Microsoft.Data.DataView.DataViewSchema -&gt; Microsoft.ML.Data.BinaryPredictionTransformer&lt;'Model (requires 'Model : null and 'Model :&gt; Microsoft.ML.IPredictorProducing&lt;single&gt;)&gt;" Usage="sgdBinaryTrainerBase.MakeTransformer (model, trainSchema)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StandardLearners</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Data.BinaryPredictionTransformer&lt;TModel&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="model" Type="TModel" />
        <Parameter Name="trainSchema" Type="Microsoft.Data.DataView.DataViewSchema" />
      </Parameters>
      <Docs>
        <param name="model">To be added.</param>
        <param name="trainSchema">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PredictionKind">
      <MemberSignature Language="C#" Value="public override Microsoft.ML.PredictionKind PredictionKind { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.ML.PredictionKind PredictionKind" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Trainers.SgdBinaryTrainerBase`1.PredictionKind" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property PredictionKind As PredictionKind" />
      <MemberSignature Language="F#" Value="member this.PredictionKind : Microsoft.ML.PredictionKind" Usage="Microsoft.ML.Trainers.SgdBinaryTrainerBase&lt;'Model (requires 'Model : null and 'Model :&gt; Microsoft.ML.IPredictorProducing&lt;System.single&gt;)&gt;.PredictionKind" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StandardLearners</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.PredictionKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShuffleData">
      <MemberSignature Language="C#" Value="protected override bool ShuffleData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShuffleData" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Trainers.SgdBinaryTrainerBase`1.ShuffleData" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property ShuffleData As Boolean" />
      <MemberSignature Language="F#" Value="member this.ShuffleData : bool" Usage="Microsoft.ML.Trainers.SgdBinaryTrainerBase&lt;'Model (requires 'Model : null and 'Model :&gt; Microsoft.ML.IPredictorProducing&lt;System.single&gt;)&gt;.ShuffleData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.StandardLearners</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>