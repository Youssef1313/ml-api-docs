<Type Name="ComponentCreation" FullName="Microsoft.ML.Data.ComponentCreation">
  <TypeSignature Language="C#" Value="public static class ComponentCreation" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ComponentCreation extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Data.ComponentCreation" />
  <TypeSignature Language="VB.NET" Value="Public Module ComponentCreation" />
  <TypeSignature Language="F#" Value="type ComponentCreation = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.Data</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            This class defines extension methods for an <see cref="T:Microsoft.ML.IHostEnvironment" /> to facilitate creating
            components (loaders, transforms, trainers, scorers, evaluators, savers).
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="LoadPredictorOrNull">
      <MemberSignature Language="C#" Value="public static Microsoft.ML.IPredictor LoadPredictorOrNull (this Microsoft.ML.IHostEnvironment env, System.IO.Stream modelStream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.ML.IPredictor LoadPredictorOrNull(class Microsoft.ML.IHostEnvironment env, class System.IO.Stream modelStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Data.ComponentCreation.LoadPredictorOrNull(Microsoft.ML.IHostEnvironment,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LoadPredictorOrNull (env As IHostEnvironment, modelStream As Stream) As IPredictor" />
      <MemberSignature Language="F#" Value="static member LoadPredictorOrNull : Microsoft.ML.IHostEnvironment * System.IO.Stream -&gt; Microsoft.ML.IPredictor" Usage="Microsoft.ML.Data.ComponentCreation.LoadPredictorOrNull (env, modelStream)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.IPredictor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.IHostEnvironment" RefType="this" />
        <Parameter Name="modelStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="env">The host environment to use.</param>
        <param name="modelStream">The model stream.</param>
        <summary>
            Loads a predictor from the model stream. Returns null iff there's no predictor.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadTransforms">
      <MemberSignature Language="C#" Value="public static Microsoft.Data.DataView.IDataView LoadTransforms (this Microsoft.ML.IHostEnvironment env, System.IO.Stream modelStream, Microsoft.Data.DataView.IDataView data);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Data.DataView.IDataView LoadTransforms(class Microsoft.ML.IHostEnvironment env, class System.IO.Stream modelStream, class Microsoft.Data.DataView.IDataView data) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Data.ComponentCreation.LoadTransforms(Microsoft.ML.IHostEnvironment,System.IO.Stream,Microsoft.Data.DataView.IDataView)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LoadTransforms (env As IHostEnvironment, modelStream As Stream, data As IDataView) As IDataView" />
      <MemberSignature Language="F#" Value="static member LoadTransforms : Microsoft.ML.IHostEnvironment * System.IO.Stream * Microsoft.Data.DataView.IDataView -&gt; Microsoft.Data.DataView.IDataView" Usage="Microsoft.ML.Data.ComponentCreation.LoadTransforms (env, modelStream, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Data.DataView.IDataView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.IHostEnvironment" RefType="this" />
        <Parameter Name="modelStream" Type="System.IO.Stream" />
        <Parameter Name="data" Type="Microsoft.Data.DataView.IDataView" />
      </Parameters>
      <Docs>
        <param name="env">The host environment to use.</param>
        <param name="modelStream">The model stream to load from.</param>
        <param name="data">The data to apply transforms to.</param>
        <summary>
            Load the transforms (but not loader) from the model steram and apply them to the specified data.
            It is acceptable to have no transforms in the model stream: in this case the original
            <paramref name="data" /> will be returned.
            </summary>
        <returns>The transformed data.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadFromEnumerable&lt;TRow&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Data.DataView.IDataView ReadFromEnumerable&lt;TRow&gt; (this Microsoft.ML.DataOperationsCatalog catalog, System.Collections.Generic.IEnumerable&lt;TRow&gt; data, Microsoft.ML.Data.SchemaDefinition schemaDefinition = null) where TRow : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Data.DataView.IDataView ReadFromEnumerable&lt;class TRow&gt;(class Microsoft.ML.DataOperationsCatalog catalog, class System.Collections.Generic.IEnumerable`1&lt;!!TRow&gt; data, class Microsoft.ML.Data.SchemaDefinition schemaDefinition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Data.ComponentCreation.ReadFromEnumerable``1(Microsoft.ML.DataOperationsCatalog,System.Collections.Generic.IEnumerable{``0},Microsoft.ML.Data.SchemaDefinition)" />
      <MemberSignature Language="F#" Value="static member ReadFromEnumerable : Microsoft.ML.DataOperationsCatalog * seq&lt;'Row (requires 'Row : null)&gt; * Microsoft.ML.Data.SchemaDefinition -&gt; Microsoft.Data.DataView.IDataView (requires 'Row : null)" Usage="Microsoft.ML.Data.ComponentCreation.ReadFromEnumerable (catalog, data, schemaDefinition)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Data.DataView.IDataView</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TRow">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="catalog" Type="Microsoft.ML.DataOperationsCatalog" RefType="this" />
        <Parameter Name="data" Type="System.Collections.Generic.IEnumerable&lt;TRow&gt;" />
        <Parameter Name="schemaDefinition" Type="Microsoft.ML.Data.SchemaDefinition" />
      </Parameters>
      <Docs>
        <typeparam name="TRow">The user-defined item type.</typeparam>
        <param name="catalog">The context to use for data view creation.</param>
        <param name="data">The data to wrap around.</param>
        <param name="schemaDefinition">The optional schema definition of the data view to create. If <c>null</c>,
             the schema definition is inferred from <typeparamref name="TRow" />.</param>
        <summary>
             Create a new <see cref="T:Microsoft.Data.DataView.IDataView" /> over an enumerable of the items of user-defined type.
             The user maintains ownership of the <paramref name="data" /> and the resulting data view will
             never alter the contents of the <paramref name="data" />.
             Since <see cref="T:Microsoft.Data.DataView.IDataView" /> is assumed to be immutable, the user is expected to support
             multiple enumeration of the <paramref name="data" /> that would return the same results, unless
             the user knows that the data will only be cursored once.
            
             One typical usage for streaming data view could be: create the data view that lazily loads data
             as needed, then apply pre-trained transformations to it and cursor through it for transformation
             results.
             </summary>
        <returns>The constructed <see cref="T:Microsoft.Data.DataView.IDataView" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Zip">
      <MemberSignature Language="C#" Value="public static Microsoft.Data.DataView.IDataView Zip (this Microsoft.ML.IHostEnvironment env, System.Collections.Generic.IEnumerable&lt;Microsoft.Data.DataView.IDataView&gt; sources);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Data.DataView.IDataView Zip(class Microsoft.ML.IHostEnvironment env, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Data.DataView.IDataView&gt; sources) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Data.ComponentCreation.Zip(Microsoft.ML.IHostEnvironment,System.Collections.Generic.IEnumerable{Microsoft.Data.DataView.IDataView})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Zip (env As IHostEnvironment, sources As IEnumerable(Of IDataView)) As IDataView" />
      <MemberSignature Language="F#" Value="static member Zip : Microsoft.ML.IHostEnvironment * seq&lt;Microsoft.Data.DataView.IDataView&gt; -&gt; Microsoft.Data.DataView.IDataView" Usage="Microsoft.ML.Data.ComponentCreation.Zip (env, sources)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.Data</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Data.DataView.IDataView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="env" Type="Microsoft.ML.IHostEnvironment" RefType="this" />
        <Parameter Name="sources" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Data.DataView.IDataView&gt;" />
      </Parameters>
      <Docs>
        <param name="env">The host environment to use.</param>
        <param name="sources">A non-empty collection of data views to zip together.</param>
        <summary>
            Create a new data view which is obtained by appending all columns of all the source data views.
            If the data views are of different length, the resulting data view will have the length equal to the
            length of the shortest source.
            </summary>
        <returns>The resulting data view.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>