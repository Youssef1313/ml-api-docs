<Type Name="IidAnomalyDetectionBaseWrapper" FullName="Microsoft.ML.Transforms.TimeSeries.IidAnomalyDetectionBaseWrapper">
  <TypeSignature Language="C#" Value="public class IidAnomalyDetectionBaseWrapper : Microsoft.ML.ITransformer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit IidAnomalyDetectionBaseWrapper extends System.Object implements class Microsoft.ML.ITransformer, class Microsoft.ML.Model.ICanSaveModel" />
  <TypeSignature Language="DocId" Value="T:Microsoft.ML.Transforms.TimeSeries.IidAnomalyDetectionBaseWrapper" />
  <TypeSignature Language="VB.NET" Value="Public Class IidAnomalyDetectionBaseWrapper&#xA;Implements ITransformer" />
  <TypeSignature Language="F#" Value="type IidAnomalyDetectionBaseWrapper = class&#xA;    interface ITransformer&#xA;    interface ICanSaveModel" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.ML.TimeSeries</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.ML.ITransformer</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.ML.Model.ICanSaveModel</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            The is the wrapper to <see cref="T:Microsoft.ML.Transforms.TimeSeries.IidAnomalyDetectionBaseWrapper.IidAnomalyDetectionBase" /> that computes the p-values and martingale scores for a supposedly i.i.d input sequence of floats. In other words, it assumes
            the input sequence represents the raw anomaly score which might have been computed via another process.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="GetOutputSchema">
      <MemberSignature Language="C#" Value="public Microsoft.Data.DataView.DataViewSchema GetOutputSchema (Microsoft.Data.DataView.DataViewSchema inputSchema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Data.DataView.DataViewSchema GetOutputSchema(class Microsoft.Data.DataView.DataViewSchema inputSchema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.TimeSeries.IidAnomalyDetectionBaseWrapper.GetOutputSchema(Microsoft.Data.DataView.DataViewSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOutputSchema (inputSchema As DataViewSchema) As DataViewSchema" />
      <MemberSignature Language="F#" Value="abstract member GetOutputSchema : Microsoft.Data.DataView.DataViewSchema -&gt; Microsoft.Data.DataView.DataViewSchema&#xA;override this.GetOutputSchema : Microsoft.Data.DataView.DataViewSchema -&gt; Microsoft.Data.DataView.DataViewSchema" Usage="iidAnomalyDetectionBaseWrapper.GetOutputSchema inputSchema" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.ITransformer.GetOutputSchema(Microsoft.Data.DataView.DataViewSchema)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.TimeSeries</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Data.DataView.DataViewSchema</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputSchema" Type="Microsoft.Data.DataView.DataViewSchema" />
      </Parameters>
      <Docs>
        <param name="inputSchema">To be added.</param>
        <summary>
            Schema propagation for transformers.
            Returns the output schema of the data, if the input schema is like the one provided.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRowToRowMapper">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Data.IRowToRowMapper GetRowToRowMapper (Microsoft.Data.DataView.DataViewSchema inputSchema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.Data.IRowToRowMapper GetRowToRowMapper(class Microsoft.Data.DataView.DataViewSchema inputSchema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.TimeSeries.IidAnomalyDetectionBaseWrapper.GetRowToRowMapper(Microsoft.Data.DataView.DataViewSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRowToRowMapper (inputSchema As DataViewSchema) As IRowToRowMapper" />
      <MemberSignature Language="F#" Value="abstract member GetRowToRowMapper : Microsoft.Data.DataView.DataViewSchema -&gt; Microsoft.ML.Data.IRowToRowMapper&#xA;override this.GetRowToRowMapper : Microsoft.Data.DataView.DataViewSchema -&gt; Microsoft.ML.Data.IRowToRowMapper" Usage="iidAnomalyDetectionBaseWrapper.GetRowToRowMapper inputSchema" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.ITransformer.GetRowToRowMapper(Microsoft.Data.DataView.DataViewSchema)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.TimeSeries</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Data.IRowToRowMapper</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputSchema" Type="Microsoft.Data.DataView.DataViewSchema" />
      </Parameters>
      <Docs>
        <param name="inputSchema">The input schema for which we should get the mapper.</param>
        <summary>
            Constructs a row-to-row mapper based on an input schema. If <see cref="P:Microsoft.ML.Transforms.TimeSeries.IidAnomalyDetectionBaseWrapper.IsRowToRowMapper" />
            is <c>false</c>, then an exception should be thrown. If the input schema is in any way
            unsuitable for constructing the mapper, an exception should likewise be thrown.
            </summary>
        <returns>The row to row mapper.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStatefulRowToRowMapper">
      <MemberSignature Language="C#" Value="public Microsoft.ML.Data.IRowToRowMapper GetStatefulRowToRowMapper (Microsoft.Data.DataView.DataViewSchema inputSchema);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.ML.Data.IRowToRowMapper GetStatefulRowToRowMapper(class Microsoft.Data.DataView.DataViewSchema inputSchema) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.TimeSeries.IidAnomalyDetectionBaseWrapper.GetStatefulRowToRowMapper(Microsoft.Data.DataView.DataViewSchema)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStatefulRowToRowMapper (inputSchema As DataViewSchema) As IRowToRowMapper" />
      <MemberSignature Language="F#" Value="abstract member GetStatefulRowToRowMapper : Microsoft.Data.DataView.DataViewSchema -&gt; Microsoft.ML.Data.IRowToRowMapper&#xA;override this.GetStatefulRowToRowMapper : Microsoft.Data.DataView.DataViewSchema -&gt; Microsoft.ML.Data.IRowToRowMapper" Usage="iidAnomalyDetectionBaseWrapper.GetStatefulRowToRowMapper inputSchema" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.Transforms.TimeSeries.IStatefulTransformer.GetStatefulRowToRowMapper(Microsoft.Data.DataView.DataViewSchema)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.TimeSeries</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.ML.Data.IRowToRowMapper</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputSchema" Type="Microsoft.Data.DataView.DataViewSchema" />
      </Parameters>
      <Docs>
        <param name="inputSchema">The input schema for which we should get the mapper.</param>
        <summary>
            Same as <see cref="M:Microsoft.ML.ITransformer.GetRowToRowMapper(Microsoft.Data.DataView.DataViewSchema)" /> but also supports mechanism to save the state.
            </summary>
        <returns>The row to row mapper.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRowToRowMapper">
      <MemberSignature Language="C#" Value="public bool IsRowToRowMapper { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRowToRowMapper" />
      <MemberSignature Language="DocId" Value="P:Microsoft.ML.Transforms.TimeSeries.IidAnomalyDetectionBaseWrapper.IsRowToRowMapper" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsRowToRowMapper As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsRowToRowMapper : bool" Usage="Microsoft.ML.Transforms.TimeSeries.IidAnomalyDetectionBaseWrapper.IsRowToRowMapper" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.ML.ITransformer.IsRowToRowMapper</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.TimeSeries</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Whether a call to <see cref="M:Microsoft.ML.Transforms.TimeSeries.IidAnomalyDetectionBaseWrapper.GetRowToRowMapper(Microsoft.Data.DataView.DataViewSchema)" /> should succeed, on an
            appropriate schema.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public virtual void Save (Microsoft.ML.Model.ModelSaveContext ctx);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Save(class Microsoft.ML.Model.ModelSaveContext ctx) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.TimeSeries.IidAnomalyDetectionBaseWrapper.Save(Microsoft.ML.Model.ModelSaveContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Save (ctx As ModelSaveContext)" />
      <MemberSignature Language="F#" Value="abstract member Save : Microsoft.ML.Model.ModelSaveContext -&gt; unit&#xA;override this.Save : Microsoft.ML.Model.ModelSaveContext -&gt; unit" Usage="iidAnomalyDetectionBaseWrapper.Save ctx" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.Model.ICanSaveModel.Save(Microsoft.ML.Model.ModelSaveContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.TimeSeries</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctx" Type="Microsoft.ML.Model.ModelSaveContext" />
      </Parameters>
      <Docs>
        <param name="ctx">To be added.</param>
        <summary>
            For saving a model into a repository.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public Microsoft.Data.DataView.IDataView Transform (Microsoft.Data.DataView.IDataView input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Data.DataView.IDataView Transform(class Microsoft.Data.DataView.IDataView input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.ML.Transforms.TimeSeries.IidAnomalyDetectionBaseWrapper.Transform(Microsoft.Data.DataView.IDataView)" />
      <MemberSignature Language="VB.NET" Value="Public Function Transform (input As IDataView) As IDataView" />
      <MemberSignature Language="F#" Value="abstract member Transform : Microsoft.Data.DataView.IDataView -&gt; Microsoft.Data.DataView.IDataView&#xA;override this.Transform : Microsoft.Data.DataView.IDataView -&gt; Microsoft.Data.DataView.IDataView" Usage="iidAnomalyDetectionBaseWrapper.Transform input" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.ML.ITransformer.Transform(Microsoft.Data.DataView.IDataView)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.ML.TimeSeries</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Data.DataView.IDataView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="Microsoft.Data.DataView.IDataView" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <summary>
            Take the data in, make transformations, output the data.
            Note that <see cref="T:Microsoft.Data.DataView.IDataView" />'s are lazy, so no actual transformations happen here, just schema validation.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>